/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.global_hits.es.usuario.controller.contract;

import java.util.List;
import java.util.Optional;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import com.global_hits.es.usuario.model.ErrorResponse;
import com.global_hits.es.usuario.model.User;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-07-21T21:48:02.202-05:00[America/Bogota]")

@Validated
@Api(tags = "userV1", value = "Usuario", description = "Servicio Entidad Usuario")
public interface IUsuarioContractES {

	@ApiOperation(value = "agrego un usuario a la entidad Usuario", nickname = "adduser", notes = "",
    		response = User.class, tags={ "userV1", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Objeto Usuario", response = User.class),
        @ApiResponse(code = 400, message = "Objeto generico para response por bad request", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Objeto generico para response por internal server error", response = ErrorResponse.class) })
    @RequestMapping(value = "/user",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<?> adduser(@ApiParam(value = "" ,required=true )  @Valid @RequestBody User body);


    @ApiOperation(value = "Eliminacion de un usuario", nickname = "deleteUser", notes = "", tags={ "userV1", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Objeto generico para response por bad request", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Objeto generico para response por internal server error", response = ErrorResponse.class) })
    @RequestMapping(value = "/user/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<?> deleteUser(@ApiParam(value = "",required=true) @PathVariable("userId") String userId);


    @ApiOperation(value = "obtiene todos los usuarios registrados", nickname = "getUser", 
    		notes = "obtiene todos los usuarios registrados", response = User.class, responseContainer = "List", tags={ "userV1", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Lista de Usuarios", response = User.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Objeto generico para response por bad request", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Objeto generico para response por internal server error", response = ErrorResponse.class) })
    @RequestMapping(value = "/user",
        produces = { "application/json" }, 
       
        method = RequestMethod.GET)
    ResponseEntity<?> getUser();


    @ApiOperation(value = "obtiene la informacion de un usuario en especifico.", 
    		nickname = "getUserById", notes = "", response = User.class, tags={ "userV1", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Objeto Usuario", response = User.class),
        @ApiResponse(code = 400, message = "Objeto generico para response por bad request", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Objeto generico para response por internal server error", response = ErrorResponse.class) })
    @RequestMapping(value = "/user/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> getUserById(@ApiParam(value = "",required=true) @PathVariable("userId") String userId);


    @ApiOperation(value = "Actualizacion de usuario en la entidad Usuario",
    		nickname = "updateUser", notes = "", response = User.class, tags={ "userV1", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Objeto Usuario", response = User.class),
        @ApiResponse(code = 400, message = "Objeto generico para response por bad request", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Objeto generico para response por internal server error", response = ErrorResponse.class) })
    @RequestMapping(value = "/user",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<?> updateUser(@ApiParam(value = "" ,required=true )  @Valid @RequestBody User body);



	Optional<NativeWebRequest> getRequest();

}
